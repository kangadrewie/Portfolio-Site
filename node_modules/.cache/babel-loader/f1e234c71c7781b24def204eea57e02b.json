{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgorman/Documents/Personal Website/site_2/src/components/gitexplorer/FileItem.js\";\nimport React, { Component } from 'react';\n\nclass FileItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      explorerAction: {\n        type: 'tree',\n        branchID: ''\n      }\n    };\n    this.fileItemActions = this.fileItemActions.bind(this);\n  }\n\n  fileItemActions(e) {\n    console.log('Clicked', e.currentTarget.getAttribute('type'), e.currentTarget.id);\n    console.log(this.props.fileState);\n\n    if (e.currentTarget.getAttribute('type') === 'blob') {\n      this.props.fileAction({\n        action: {\n          type: 'blobs',\n          branchID: e.currentTarget.id\n        }\n      });\n    } else {\n      console.log(e.currentTarget.id);\n      this.props.updateDirectory(e.currentTarget.id);\n    }\n  }\n\n  render() {\n    const fileItem = this.props.fileState;\n    return Object.keys(this.props.fileState).map((obj, i) => {\n      // Define File Extension for conditional statement\n      let fileExt = fileItem[obj].path.substr(fileItem[obj].path.indexOf(\".\") + 1);\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: fileItem[obj].sha,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        style: trStyle,\n        className: \"inactive\",\n        id: fileItem[obj].sha,\n        type: fileItem[obj].type,\n        onClick: this.fileItemActions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"left aligned\",\n        style: fileName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        style: iconStyle,\n        className: // Conditional File Extension Icon\n        fileItem[obj].type == 'tree' ? 'folder icon' : fileExt === 'py' || fileExt == 'pyc' ? 'python icon' : fileExt === 'html' ? 'html5 icon' : fileExt === 'js' ? 'js icon' : fileExt === 'sh' ? 'server icon' : fileExt === 'json' ? 'file alternate icon' : fileExt === 'css' ? 'css3 alternate icon' : fileExt === 'txt' ? 'file outline icon' : fileExt === 'zip' ? 'zip icon' : fileItem[obj].type == 'tree' ? '' : 'file icon',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }\n      }), fileItem[obj].path)));\n    });\n  }\n\n}\n\n;\nconst trStyle = {\n  display: 'table',\n  width: '100%',\n  whiteSpace: 'no-wrap'\n};\nconst iconStyle = {\n  marginRight: '20px'\n};\nconst fileName = {\n  width: '100%',\n  cursor: 'pointer'\n};\nexport default FileItem;","map":{"version":3,"sources":["/Users/andrewgorman/Documents/Personal Website/site_2/src/components/gitexplorer/FileItem.js"],"names":["React","Component","FileItem","constructor","props","state","explorerAction","type","branchID","fileItemActions","bind","e","console","log","currentTarget","getAttribute","id","fileState","fileAction","action","updateDirectory","render","fileItem","Object","keys","map","obj","i","fileExt","path","substr","indexOf","sha","trStyle","fileName","iconStyle","display","width","whiteSpace","marginRight","cursor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass FileItem extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            explorerAction: {\n                type: 'tree',\n                branchID: '',\n\n            }\n        }\n\n        this.fileItemActions = this.fileItemActions.bind(this);\n    }\n\n    fileItemActions(e) {\n        console.log('Clicked', e.currentTarget.getAttribute('type'),  e.currentTarget.id);\n        console.log(this.props.fileState);\n        if (e.currentTarget.getAttribute('type') === 'blob') {\n            this.props.fileAction({action:\n                {\n                    type: 'blobs',\n                    branchID: e.currentTarget.id\n                }\n            })\n        } else {\n            console.log(e.currentTarget.id); \n            this.props.updateDirectory(e.currentTarget.id)\n        }\n    }\n\n    render() {\n        const fileItem = this.props.fileState;\n        return Object.keys(this.props.fileState).map((obj, i) => {\n\n            // Define File Extension for conditional statement\n            let fileExt = fileItem[obj].path.substr(fileItem[obj].path.indexOf(\".\") + 1);\n            \n            return (\n                <React.Fragment key={fileItem[obj].sha}>\n                    <tr style={trStyle} className=\"inactive\" id={fileItem[obj].sha} type={(fileItem[obj].type)} onClick={this.fileItemActions}>\n                        <td className=\"left aligned\" style={fileName}>\n                            <i style={iconStyle} className={\n                                 // Conditional File Extension Icon\n                                (fileItem[obj].type == 'tree') ? 'folder icon' :\n                                (fileExt === 'py' || fileExt == 'pyc') ? 'python icon' :\n                                (fileExt === 'html') ? 'html5 icon' :\n                                (fileExt === 'js') ? 'js icon' :\n                                (fileExt === 'sh') ? 'server icon' :\n                                (fileExt === 'json') ? 'file alternate icon' :\n                                (fileExt === 'css') ? 'css3 alternate icon' :\n                                (fileExt === 'txt') ? 'file outline icon' :\n                                (fileExt === 'zip') ? 'zip icon' :\n                                (fileItem[obj].type == 'tree') ? '' : 'file icon'\n                            }></i>\n                            {fileItem[obj].path}\n                        </td>\n                    </tr>\n                </React.Fragment>\n            );\n        })\n    }\n};\n\nconst trStyle = {\n    display: 'table',\n    width: '100%',\n    whiteSpace: 'no-wrap'\n}\n\nconst iconStyle = {\n    marginRight: '20px'\n}\n\nconst fileName = {\n    width: '100%',\n    cursor: 'pointer'\n}\n\nexport default FileItem;\n"]},"metadata":{},"sourceType":"module"}